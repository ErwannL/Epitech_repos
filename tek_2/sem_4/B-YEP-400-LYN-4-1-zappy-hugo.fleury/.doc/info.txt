
The goal of this project is to create a network game where several teams confront on a tiles map containing
resources.
The winning team is the first one where at least 6 players who reach the maximum elevation.

server spawn ressource every 20 units of time

the ressource quantity can be found with the following formula map_width * map_height * density:
resource  | density
----------+--------
food      | 0.5
linemate  | 0.3
deraumere | 0.15
sibur     | 0.1
mendiane  | 0.1
phiras    | 0.08
thystame  | 0.05

One unit of food allows the Trantorians to live for 126 units of time

The elevation begins as soon as a player initiates the incantation.
It is not necessary for the players to be on the same team; they only need to be of the same level.
elevation | nb of players | linemate | deraumere | sibur | mendiane | phiras | thystame
----------+---------------+----------+-----------+-------+----------+--------+---------
1->2      | 1             | 1        | 0         | 0     | 0        | 0      | 0
2->3      | 2             | 1        | 1         | 1     | 0        | 0      | 0
3->4      | 2             | 2        | 0         | 1     | 0        | 2      | 0
4->5      | 4             | 1        | 1         | 2     | 0        | 1      | 0
5->6      | 4             | 1        | 2         | 1     | 3        | 0      | 0
6->7      | 6             | 1        | 2         | 3     | 0        | 1      | 0
7->8      | 6             | 2        | 2         | 2     | 2        | 2      | 1

The verification of the prerequisites for the incantation is done at the beginning and at the end of the action.
Each player participating is an elevation is freezed during the ritual. They can’t do any other action in the meantime.

serveur in single thread

After it’s launched the user has no more influence on how it functions.
It drives a drone (the player) (kind of similar to what a champion does in the Corewar project, remember?).
The graphical client is autonomous.

In the beginning, the player has 10 life units, which means they can survive for 1260 time units, or 1260/f seconds.

Each player responds to the following actions and only to these ones, with the following syntax:
action                       | command        |time limit | response
=============================+================+===========+=======================================
move up one tile             | Forward        | 7/f       | ok
turn 90° right               | Right          | 7/f       | ok
turn 90° left                | Left           | 7/f       | ok
-----------------------------+----------------+-----------+---------------------------------------
look around                  | Look           | 7/f       | [tile1, tile2,.. .]
inventory                    | Inventory      | 1/f       | [linemate n, sibur n,. .. ]
broadcast text               | Broadcast text | 7/f       | ok
-----------------------------+----------------+-----------+---------------------------------------
number of team unused slots  | Connect_nbr    | -         | value
fork a player                | Fork           | 42/f      | ok
eject players from this tile | Eject          | 7/f       | ok/ko
death of a player            | -              | -         | dead
-----------------------------+----------------+-----------+---------------------------------------
take object                  | Take object    | 7/f       | ok/ko
set object down              | Set object     | 7/f       | ok/ko
start incantation            | Incantation    | 300/f     | (before) Elevation underway/ko
                             |                |           | (after) current level: k/ko

The dialogue between the ai client and the server is carried out via tcp sockets.

The client sends its requests, without waiting for them to be done.
The server sends back a message confirming the correct execution of the requests.

The client’s connection to the server happens as follows:
1. the client opens a socket on the server’s port,
2. the server and the client communicate the following way:
<-- WELCOME \ n
--> TEAM - NAME \ n
<-- CLIENT - NUM \ n
<-- X Y \ n
X and Y indicate the world’s dimensions.
CLIENT-NUM indicates the number of slots available on the server for the TEAM-NAME team.
If this number is greater than or equal to 1, a new client can connect.

The client can send up to 10 requests in a row without any response from the server.
Over 10, the server will no longer take them into account.

The time unit is seconds.
An action’s execution time is calculated with the following formula: action/f
where f is an integer representing the reciprocal (multiplicative inverse) of time unit.
For instance, if f=1, “forward” takes 7/1 = 7 seconds.
By default f=100.

A player can reproduce thanks to the fork command, its product an egg
This operation authorizes a new client to be connected.
The connect_nbr command sends back the number of connections that are underway and authorized for
this family.

This command allows you to see what object the drone has and how much time it has left to live.
The server will send a line similar to the following one:
[ food 345 , sibur 3 , phiras 5 , ... , deraumere 0]\n

To emit a message, the client must send the following command to the server:
Broadcast text \ n
The server will then send the following line to all of its clients:
message K , text \ n
where K is the tile where the sound is coming from

When a client send the eject command to the server, all of the clients that are sharing the tile will receive
the following line:
eject : K \ n
where K is the direction of the tile where the pushed player is coming from.
When a player eject all other being from the unit of terrain it also destroy any eggs layed on that unit.

The interface must integrate at least a 2D visualization via intermediary icons, which must also allow a representation of the world to be seen.
A 3D interface, or any other type of representation, will be a greatly appreciated asset. Still, remember that
the graphical interface must be functional before being visually appealing.

In order to develop this interface, you must use C++ and remember that you’ll need to handle incoming and
outgoing data the right way with buffering same as in the server.

For 2D renders, we greatly encourage you to use the SFML because you should already
know how it works.

The game board represents the entirety of this world’s surface, like a world map
If a player exits by the right of the board, they will come back through the left. Up->down,
and so on.. .
